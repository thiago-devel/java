<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="SOAP Sales Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">SAOW00754602.cardif.com.br</stringProp>
        <stringProp name="HTTPSampler.port">8443</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">/wsdirectsales-sales-service/SalesBS</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Number of Users" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">300</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1375525852000</longProp>
        <longProp name="ThreadGroup.end_time">1375525852000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Soap Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:wsd=&quot;http://wsdirectsales.cardif.com.br/&quot;&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;wsd:doSale&gt;&#xd;
         &lt;doSaleRequest&gt;&#xd;
            &lt;sale&gt;&#xd;
               &lt;customer&gt;&#xd;
                  &lt;birthDate&gt;1984-04-01&lt;/birthDate&gt;&#xd;
                  &lt;contacts&gt;&#xd;
                     &lt;contact&gt;&#xd;
                        &lt;address&gt;&#xd;
                           &lt;addressDetail&gt;RUA SAO PAULO&lt;/addressDetail&gt;&#xd;
                           &lt;addressNumber&gt;10&lt;/addressNumber&gt;&#xd;
                           &lt;addressPostalCode&gt;04536010&lt;/addressPostalCode&gt;&#xd;
                           &lt;addressReference/&gt;&#xd;
                           &lt;city&gt;SAO PAULO&lt;/city&gt;&#xd;
                           &lt;neighborhood&gt;GRAJAU&lt;/neighborhood&gt;&#xd;
                           &lt;state&gt;SP&lt;/state&gt;&#xd;
                        &lt;/address&gt;&#xd;
                        &lt;phone&gt;&#xd;
                           &lt;phoneNumber&gt;1145784578&lt;/phoneNumber&gt;&#xd;
                        &lt;/phone&gt;&#xd;
                     &lt;/contact&gt;&#xd;
                  &lt;/contacts&gt;&#xd;
                  &lt;fullName&gt;CARMEM LUCIA ALELUIA&lt;/fullName&gt;&#xd;
                  &lt;gender&gt;FEMALE&lt;/gender&gt;&#xd;
                  &lt;identity&gt;&#xd;
                     &lt;documentType&gt;CPF&lt;/documentType&gt;&#xd;
                     &lt;documentValue&gt;${CPF}&lt;/documentValue&gt;&#xd;
                  &lt;/identity&gt;&#xd;
                  &lt;maritalStatus&gt;SINGLE&lt;/maritalStatus&gt;&#xd;
               &lt;/customer&gt;&#xd;
               &lt;paymentMethod&gt;&#xd;
                  &lt;cardPayment&gt;&#xd;
                     &lt;cardDisplayName&gt;CARMEM LUCIA ALELUIA&lt;/cardDisplayName&gt;&#xd;
                     &lt;cardFlag&gt;luiza&lt;/cardFlag&gt;&#xd;
                     &lt;cardNumber&gt;5309946709786222&lt;/cardNumber&gt;&#xd;
                     &lt;cardSecurityCode&gt;456&lt;/cardSecurityCode&gt;&#xd;
                     &lt;cardValidity&gt;2017-04-01&lt;/cardValidity&gt;&#xd;
                     &lt;cardValue&gt;11.89&lt;/cardValue&gt;&#xd;
                  &lt;/cardPayment&gt;&#xd;
                  &lt;paymentType&gt;8&lt;/paymentType&gt;&#xd;
               &lt;/paymentMethod&gt;&#xd;
               &lt;product&gt;&#xd;
                  &lt;descripton&gt;CART√ÉO PROTEGIDO&lt;/descripton&gt;&#xd;
                  &lt;ID&gt;25&lt;/ID&gt;&#xd;
               &lt;/product&gt;&#xd;
               &lt;salesman&gt;&#xd;
                  &lt;identity&gt;&#xd;
                     &lt;documentType&gt;CPF&lt;/documentType&gt;&#xd;
                     &lt;documentValue&gt;10752104969&lt;/documentValue&gt;&#xd;
                  &lt;/identity&gt;&#xd;
                  &lt;partner&gt;&#xd;
                     &lt;description/&gt;&#xd;
                     &lt;ID&gt;123&lt;/ID&gt;&#xd;
                  &lt;/partner&gt;&#xd;
                  &lt;operatorName&gt;JOAO DA SILVA&lt;/operatorName&gt;&#xd;
               &lt;/salesman&gt;&#xd;
            &lt;/sale&gt;&#xd;
         &lt;/doSaleRequest&gt;&#xd;
      &lt;/wsd:doSale&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">SAOW00754602.cardif.com.br</stringProp>
          <stringProp name="HTTPSampler.port">8443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">wsdirectsales-sales-service/SalesBS</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="CPF Generator" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.util.ArrayList;
import java.util.List;

import javax.swing.text.MaskFormatter;

List listaAleatoria = new ArrayList();
List listaNumMultiplicados = null;

// Primeiro executamos os metodos de geracao
for (int i = 0; i &lt; 9; i++) {
	listaAleatoria.add((int) (Math.random() * 10));
}

listaNumMultiplicados = new ArrayList();
int primeiroDigito;
int totalSomatoria = 0;
int restoDivisao;
int peso = 10;

// Para cada item na lista multiplicamos seu valor pelo seu peso
for (int i = 0 ; i &lt; listaAleatoria.size() ; i++) {
	listaNumMultiplicados.add((Integer)listaAleatoria.get(i) * peso);
	peso--;
}

// Agora somamos todos os itens que foram multiplicados
for (int i = 0 ; i &lt; listaNumMultiplicados.size() ; i++) {
	totalSomatoria += (Integer)listaNumMultiplicados.get(i);
}
restoDivisao = (totalSomatoria % 11);

// Se o resto da divisao for menor que 2 o primeiro digito sera 0, senao
// subtraimos o numero 11 pelo resto da divisao
if (restoDivisao &lt; 2) {
	primeiroDigito = 0;
} else {
	primeiroDigito = 11 - restoDivisao;
}

// Apos gerar o primeiro digito o adicionamos a lista
listaAleatoria.add(primeiroDigito);
listaNumMultiplicados = new ArrayList();
int segundoDigitos;
int totalSomatorias = 0;
int restoDivisaos;
int pesos = 11;

// Para cada item na lista multiplicamos seu valor pelo seu peso
// (observe que com o aumento da lista o peso tambem aumenta)
for (int i = 0 ; i &lt; listaAleatoria.size() ; i++) {
	listaNumMultiplicados.add((Integer)listaAleatoria.get(i) * pesos);
	pesos--;
}

// Agora somamos todos os itens que foram multiplicados
for (int i = 0 ; i &lt; listaNumMultiplicados.size() ; i++) {
	totalSomatorias += (Integer)listaNumMultiplicados.get(i);
}

restoDivisaos = (totalSomatorias % 11);

// Se o resto da divisao for menor que 2 o segundo digito sera 0, senao
// subtraimos o numero 11 pelo resto da divisao
if (restoDivisaos &lt; 2) {
	segundoDigitos = 0;
} else {
	segundoDigitos = 11 - restoDivisaos;
}

// Apos gerar o segundo digito o adicionamos a lista
listaAleatoria.add(segundoDigitos);

String cpf = &quot;&quot;;
String texto = &quot;&quot;;

/*
 * Aqui vamos concatenar todos os valores da lista em uma string. Por
 * que isso? Porque a formatacao que o ArrayList gera me
 * impossibilitaria de usar a mascara, pois junto com os numeros gerados
 * ele tambem gera caracteres especias. Ex.: a sa√≠da de uma lista de
 * inteiros (de 1 a 5) seria essa: [1 , 2 , 3 , 4 , 5] Dessa forma o
 * sistema geraria a excecao ParseException
 */
for (int i = 0 ; i &lt; listaAleatoria.size() ; i++) {
	texto += listaAleatoria.get(i);
}


// Dentro do bloco try.. catch.. tentaremos adicionar uma mascara ao
// nosso CPF
try {
	MaskFormatter mf = new MaskFormatter(&quot;###########&quot;);
	mf.setValueContainsLiteralCharacters(false);
	cpf = mf.valueToString(texto);
} catch (Exception ex) {
	ex.printStackTrace();
}

vars.put(&quot;CPF&quot;, cpf);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers"/>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-736173239">&lt;soap:Body&gt;</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Verify content in response</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
